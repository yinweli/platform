//-----------------------------------------------------------------------------
#include "bittool.h"
//-----------------------------------------------------------------------------
_NSTD_BEGIN;
//-----------------------------------------------------------------------------
// 用於計算char內有幾個1的陣列
// char = 0 [00000000] : 0個1
// char = 1 [00000001] : 1個1
// char = 2 [00000010] : 1個1
// char = 3 [00000011] : 2個1
// char = 4 [00000100] : 1個1
// char = 5 [00000101] : 2個1
// char = 6 [00000110] : 2個1
// char = 7 [00000111] : 3個1 依此類推
// 當以char來索引這個陣列, 就會得到該char有幾個1的結果
unsigned char g_ucBitsCount[] = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 
								 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
								 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
								 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
								 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 
								 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
								 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 
								 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8};
//-----------------------------------------------------------------------------
// 取得數值需要的旗標數量
unsigned int bitsize(IN int iValue)
{
	return static_cast<int>(log2(iValue)) + 1;
}
//-----------------------------------------------------------------------------
// 取得c內位元位置 pos 的值
bool bitget(IN char c, IN unsigned char pos)
{
	if(pos >= 8)
		return false;

	return (c & (0x1 << pos)) ? true : false;
}
//-----------------------------------------------------------------------------
// 取得c內從位元0到位元pos中是否有true
bool bitany(IN char c, IN unsigned char pos)
{
	if(pos <= 0)
		return false;

	if(pos >= 8)
		return (c) ? true : false;

	return (c & (0xff >> (8 - pos))) ? true : false;
}
//-----------------------------------------------------------------------------
// 取得c內從位元0到位元pos中是否有false
bool bitanf(IN char c, IN unsigned char pos)
{
	if(pos <= 0)
		return false;

	if(pos > 8)
		return (~c) ? true : false;

	return (~(c | ~(0xff >> (8 - pos)))) ? true : false;
}
//-----------------------------------------------------------------------------
// 取得c內從位元0到位元pos中否全為false
bool bitnon(IN char c, IN unsigned char pos)
{
	return !bitany(c, pos);
}
//-----------------------------------------------------------------------------
// 傳回對c內位元位置pos的設值結果, 不會修改c的內容
char bitval(IN char c, IN unsigned char pos, IN bool b)
{
	if(pos >= 8)
		return c;

	return (b) ? c | (0x1 << pos) : c & ~(0x1 << pos);
}
//-----------------------------------------------------------------------------
// 傳回對c內位元位置pos的位元反向結果, 不會修改c的內容
char bitval(IN char c, IN unsigned char pos)
{
	if(pos >= 8)
		return c;

	char m = 0x1 << pos;

	return (c & m) ? c & ~m : c | m;
}
//-----------------------------------------------------------------------------
// 傳回對c內從位元0到位元pos的所有位元設值結果, 不會修改c的內容
char bitfil(IN char c, IN unsigned char pos, IN bool b)
{
	if(pos <= 0)
		return c;

	if(pos >= 8)
		return (b) ? 0xff : 0;

	return (b) ? c | (0xff >> (8 - pos)) : c & (0xff << pos);
}
//-----------------------------------------------------------------------------
// 傳回對c內從位元0到位元pos的所有位元反向結果, 不會修改c的內容
char bitnot(IN char c, IN unsigned char pos)
{
	if(pos <= 0)
		return c;

	if(pos >= 8)
		return ~c;

	char mf = (0xff >> (8 - pos));
	char mr = ~mf;

	return (c & mr) | ((~c) & mf);
}
//-----------------------------------------------------------------------------
// 取得c內從位元0到位元pos中是true的數量
unsigned char bittcount(IN char c, IN unsigned char pos)
{
	if(pos <= 0)
		return 0;

	return g_ucBitsCount[(unsigned char)((pos >= 8) ? c : c & (0xff >> (8 - pos)))];
}
//-----------------------------------------------------------------------------
// 取得c內從位元0到位元pos中是false的數量
unsigned char bitfcount(IN char c, IN unsigned char pos)
{
	if(pos <= 0)
		return 0;

	if(pos > 8)
		pos = 8;

	return pos - bittcount(c, pos);
}
//-----------------------------------------------------------------------------
_NSTD_END;
//-----------------------------------------------------------------------------